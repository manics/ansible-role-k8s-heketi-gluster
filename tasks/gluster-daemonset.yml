---
# If a node becomes unreachable Ansible will continue, but for setting up
# the storage cluster we need all nodes to be up
# https://github.com/ansible/ansible/issues/18782#issuecomment-318457240
- name: Check all hosts accessible
  assert:
    that:
      - ansible_play_hosts == ansible_play_hosts_all

# https://github.com/gluster/gluster-kubernetes/blob/27ed3198b57d19ae3230e103a17fc3729e1315ed/deploy/gk-deploy

- name: load required dm modules
  become: yes
  modprobe:
    name: "{{ item }}"
    state: present
  with_items: "{{ k8s_heketi_gluster_required_modules }}"

- name: load required dm modules on startup
  become: yes
  template:
    src: glusterfs-dm.conf.j2
    dest: /etc/modules-load.d/glusterfs-dm.conf

- name: create gluster KubeNow yaml directory
  file:
    path: "~/kubernetes-yaml/glusterfs/"
    state: directory
    mode: 0755
    recurse: yes

- name: copy gluster namespace configuration
  template:
    src: namespace.yml
    dest: "~/kubernetes-yaml/namespace.yml"

- name: copy gluster DaemonSet configuration
  template:
    src: glusterfs-daemonset.yml.j2
    dest: "~/kubernetes-yaml/glusterfs/glusterfs-daemonset.yml"

- name: create gluster DaemonSet
  command: >
    {{ k8s_heketi_gluster_kubectl }}
    apply -f
    $HOME/kubernetes-yaml/{{ item }}
  with_items:
  - namespace.yml
  - glusterfs/glusterfs-daemonset.yml
  run_once: true

- name: wait for gluster DaemonSet to be Running
  command: >
    {{ k8s_heketi_gluster_kubectl }}
    get pods
    --namespace={{ k8s_heketi_gluster_namespace }}
    -o jsonpath='{.items[?(@.spec.containers[*].name=="glusterfs")].status.phase}'
  register: get_phase
  until: get_phase.stdout | match('^(Running\s)*Running$')
  # Wait for 10 minutes
  retries: 120
  delay: 5
  run_once: true

- name: wait for gluster DaemonSet to be Ready
  command: >
    {{ k8s_heketi_gluster_kubectl }}
    get pods
    --namespace={{ k8s_heketi_gluster_namespace }}
    -o jsonpath='{.items[?(@.spec.containers[*].name=="glusterfs")].status.containerStatuses[*].ready}'
  register: get_is_ready
  until: get_is_ready.stdout | match( '^(true\s)*true$' )
  # Wait for 10 minutes
  retries: 120
  delay: 5
  run_once: true
